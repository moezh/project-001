---
interface Props {
  challenge: string;
}
const { challenge } = Astro.props;
---

<div id="webauthn" data-challenge={challenge}>
  <script is:inline>
    const challenge = new Uint8Array(
      JSON.parse(webauthn.getAttribute("data-challenge"))
    );

    const requestCredential = (credential) => {
      const publicKey = {
        challenge: challenge,
        allowCredentials: [
          {
            type: "public-key",
            transports: credential.transports,
            id: new Uint8Array(credential.rawId).buffer,
          },
        ],
      };
      navigator.credentials
        .get({ publicKey })
        .then((res) => {
          const response = res.response;
          localStorage.setItem(
            "assertion",
            JSON.stringify({
              authData: Array.from(new Uint8Array(response.authenticatorData)),
              clientData: Array.from(new Uint8Array(response.clientDataJSON)),
              signature: Array.from(new Uint8Array(response.signature)),
            })
          );
          localStorage.setItem("isLogged", JSON.stringify(true));
          window.location.href = "/";
        })
        .catch((err) => {
          console.log(err);
          window.history.go(-1);
        });
    };

    const createCredential = () => {
      const publicKey = {
        challenge: challenge,
        pubKeyCredParams: [
          { type: "public-key", alg: -7 },
          { type: "public-key", alg: -8 },
          { type: "public-key", alg: -257 },
        ],
        rp: { name: "com6.cc" },
        user: {
          id: new Uint8Array(16),
          name: "Passkey",
          displayName: "Passkey",
        },
        authenticatorSelection: {
          authenticatorAttachment: "platform",
          userVerification: "required",
        },
        timeout: 60000,
        hints: ["client-device"],
      };
      navigator.credentials
        .create({ publicKey })
        .then((res) => {
          const response = res.response;
          localStorage.setItem(
            "credential",
            JSON.stringify({
              rawId: Array.from(new Uint8Array(res.rawId)),
              algorithm: response.getPublicKeyAlgorithm(),
              transports: response.getTransports(),
            })
          );
          requestCredential(JSON.parse(localStorage.getItem("credential")));
        })
        .catch((err) => {
          console.log(err);
          window.history.go(-1);
        });
    };

    const credential = JSON.parse(localStorage.getItem("credential"));
    if (credential) {
      requestCredential(credential);
    } else {
      createCredential();
    }
  </script>
</div>
